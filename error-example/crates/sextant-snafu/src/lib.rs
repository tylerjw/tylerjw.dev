//! Sextant - Helm Chart Resource Analyzer
//!
//! A tool for analyzing Helm charts and generating reports about the Kubernetes
//! resources they would create. This version uses `snafu` for error handling.

pub mod analyzer;
pub mod chart;
pub mod report;
pub mod template;

pub use analyzer::{analyze_chart, analyze_charts};
pub use report::{ChartAnalysis, ResourceReport};

use snafu::prelude::*;

/// Main error type using snafu for error handling
#[derive(Snafu, Debug)]
pub enum Error {
    #[snafu(display("Chart error: {source}"), context(false))]
    Chart { source: chart::ChartError },

    #[snafu(display("Template error: {source}"), context(false))]
    Template { source: template::TemplateError },

    #[snafu(display("Analysis error: {source}"), context(false))]
    Analysis { source: analyzer::AnalysisError },

    #[snafu(display("Report error: {source}"), context(false))]
    Report { source: report::ReportError },

    #[snafu(display("IO error: {source}"), context(false))]
    Io { source: std::io::Error },

    #[snafu(display("JSON error: {source}"), context(false))]
    Json { source: serde_json::Error },

    #[snafu(display("YAML error: {source}"), context(false))]
    Yaml { source: serde_yaml::Error },

    #[snafu(display("Custom error: {message}"))]
    Custom {
        message: String,
        backtrace: snafu::Backtrace,
    },
}

impl From<String> for Error {
    fn from(msg: String) -> Self {
        CustomSnafu { message: msg }.build()
    }
}

/// Main result type using snafu for error handling
pub type Result<T> = std::result::Result<T, Error>;

// From implementations are automatically generated by snafu with context(false)
